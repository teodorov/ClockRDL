
task createWrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}

defaultTasks 'build'

version = '0.0.1'

apply plugin: 'java'
apply plugin: 'idea'
project.ext["ideaGroupName"]="ClockRDL"
subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
    apply plugin: 'idea'

    version = '0.0.1'

	repositories {
		mavenCentral()
	}

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.+'
    }

	sourceSets {
		main {
			java { srcDir  'src' }
            resources { srcDir 'resources'}
		}
		test {
			java { srcDir 'tests/src' }
			resources { srcDir 'tests/resources'}
		}
	}

	compileJava { 
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
		options.encoding = "UTF-8" 
	}

	test {
		maxParallelForks=4
		ignoreFailures=true
	}

	jar {
		manifest.attributes provider: 'gradle'
	}

    eclipse {
    	classpath {
        	file {
            	withXml {
                	def node = it.asNode()
                	node.appendNode('classpathentry', [kind: 'output', path: 'build/classes/main'])
            	}
        	}
    	}
	}

    idea {
        module {
            generatedSourceDirs += file('generated')

            inheritOutputDirs = false
            outputDir = sourceSets.main.output.classesDir
            testOutputDir = sourceSets.test.output.classesDir
        }
    }

	clean << {
		project.delete "generated", "build.properties", "bin"
	}

    cleanEclipse {
        project.delete ".settings"
    }

    //fix tests for jenkins
    task jenkinsTest {
        inputs.files test.outputs.files 
        doLast{
            //println "jenkins Test touch" 
            //test.properties.each { println it }
            def timestamp = System.currentTimeMillis()
            if (test.hasProperty('binResultsDir')) {
                //println "has testResultsDir" + test.binResultsDir.name
                file(file(test.binResultsDir.parent).parent).listFiles().each { 
                    if (it.name.endsWith('.xml')) {
                        //println it.name 
                        it.lastModified = timestamp
                    } 
                }
            }
        }
    }
    build.dependsOn(jenkinsTest)
}

// how to generate the modules file automatically 
// ./gradlew idea -PmodulesPath=/Users/ciprian/IdeaProjects/Plug/.idea/
apply from: './gradle/idea_modules.gradle'
task ideaModules {
    if (project.hasProperty('modulesPath')) {
        generateIdeaModulesFile(file(modulesPath), subprojects)
    }
    else {
        generateIdeaModulesFile(file('.'), subprojects)
    }
}

ideaModule.deleteAllActions()
ideaProject.deleteAllActions()
ideaWorkspace.deleteAllActions()
ideaProject.dependsOn ideaModules
cleanIdea << {
    delete "modules.xml"
}

//build global jar with everything inside
subprojects.each { subproject -> evaluationDependsOn( subproject.path ) }
jar.dependsOn subprojects.tasks['classes']

public List<File> externalDependenciesBatch() {
    def extDep = subprojects.collect { subproject -> 
      subproject.configurations.runtime.allDependencies.findAll { it instanceof ExternalDependency }}.flatten().unique()
    def dependencies = subprojects.collect { subproject ->
        subproject.configurations.runtime.filter {file -> !(extDep.findAll { file.name.startsWith(it.name) }.isEmpty()) }.getFiles()}.flatten().unique() 
    return dependencies
}

public List<File> externalDependencies() {
    def dependencies = externalDependenciesBatch()
    return dependencies
}

task cleanLibs << {
    project.delete "build/libs", "build/tmp", "build/batch", "build/linux32", "build/linux64", "build/win32", "build/win64", "build/macosx64"
}

task external(type: Copy, dependsOn: cleanLibs) {
    into "$buildDir/libs"
    from externalDependencies()
}

jar.dependsOn external
jar {
  baseName = 'ClockRDL'
  manifest {
    attributes 'Main-Class': 'ClockRDL.rdl2st80.ClockRDL2Smalltalk'
    attributes 'Class-Path': externalDependencies().collect {it.name}.join(' ')
  }
  
  subprojects.each { subproject ->
    from subproject.sourceSets.main.output.classesDir
    from subproject.sourceSets.main.output.resourcesDir }
}


task buildBatch(dependsOn: jar) << {
    File targetPath = file("$buildDir/batch")
    //copy template
    targetPath.mkdir()
    //copy jars
    copy {
        from externalDependenciesBatch()
        into file("$targetPath/jars")
    }

    copy {
        from file("$buildDir/libs")
        include '**/ClockRDL*.jar'
        into file("$targetPath/jars")
    }

    //copy changelog
    copy {
        from file("Changelog.txt")
        into targetPath
    }
}

task buildDistribution(dependsOn: [buildBatch])

task zipBatchDistribution(type: Zip, dependsOn: buildBatch) {
    baseName="ClockRDL"
    version="$version"
    classifier=""
    from("$buildDir/batch")
    into "ClockRDL-${version}"
    destinationDir file("$buildDir/distributions")
}

task zipDistribution(dependsOn: [zipBatchDistribution])
task distribution(dependsOn: zipDistribution)

