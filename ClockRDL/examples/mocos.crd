library mocos {

	relation task
		clock ready execute block unblock stop;
		var state := 0;
		const start := 0 waiting := 1 executing := 2 pending := 3;
	{
		[state = start] { ready } [ state := waiting]
		[state = waiting] { execute } [ state := executing ]
		[state = executing] { execute } [ state := executing ]
		[state = executing] { execute block } [ state := pending ]
		[state = executing] { execute stop } [ state := start ]
		[state = pending] { unblock } [ state := start ]
	}

	relation semaphore
		clock down up block unblock;
		var count := 0 queue := {||};
	{
		[count > 0] { down } [ count -= 1 ]
		[count > 0] { up } [ count += 1 ]
		[count <= 0 ] { down block } [ queue.add(1) ]
		[count <= 0 & queue.isEmpty()] { up } [ count += 1 ]
		[count <= 0 & queue.isNotEmpty()] { up unblock /*[queue first]*/ } [ {count += 1 queue.removeFirst()} ]
	}

	relation scheduler2
		clock schedule1 schedule2 execute1 execute2 block1 block2 stop1 stop2;
		var isExecuting := false queue := {||} eID := 0;
		const isPreemptive := false;

	{
	    //schedule tasks that are ready
		[!isExecuting] { schedule1 } [queue.add(1)]
		[!isExecuting] { schedule2 } [queue.add(2)]
		//start the task at the beginning of the queue
		[!isExecuting & queue.isNotEmpty() & queue.first() = 1] { execute1 } [{ isExecuting := true eID := queue.removeFirst() }]
		[!isExecuting & queue.isNotEmpty() & queue.first() = 2] { execute2 } [{ isExecuting := true eID := queue.removeFirst() }]

        //I think that the scheduling transitions should be available no matter what
        //This is based on the observation that a task that is not ready won't try to schedule itself
        [isExecuting & eID = 2] { schedule1 } [ queue.add(1) ]
        [isExecuting & eID = 1] { schedule2 } [ queue.add(2) ]

        //continue the task execution -- Jerome wants this removed
		[isExecuting & eID = 1] { execute1 }
		[isExecuting & eID = 2] { execute2 }

		//if the executing task blocks, go back to not isExecuting
		//if the task executing is not controlled by the scheduler the executing clock would disappear
		[isExecuting & eID = 1] { execute1 block1 } [{ isExecuting := false eID := 0 }]
		[isExecuting & eID = 2] { execute2 block2 } [{ isExecuting := false eID := 0 }]

		//if the scheduler is preemptive and the queue is not empty then it can decide to stop the executing task at any time
		[isExecuting & eID = 1 & isPreemptive & queue.isNotEmpty() ] { stop1 } [{ isExecuting := false eID := 0 }]
		[isExecuting & eID = 2 & isPreemptive & queue.isNotEmpty() ] { stop2 } [{ isExecuting := false eID := 0 }]
	}
}