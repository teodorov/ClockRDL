import "../examples/mocos_v1.crd"
library producer_consumer {

    //this relation simulates the events generated by the executing of the code
    //normally when coupling the mocos with an application it is the application that should generate these events
    relation code
        clock run unblock down up;
        var pc := 0;
    {
        [pc=0] { run }      [pc+=1];
        [pc=1] { run down } [pc+=1]; //try lock the empty/full semaphore
        [pc=2] { unblock }  [pc-=1]; //if blocked when getting the semaphore unblock it
        [pc=2] { run }      [pc+=1]; //execute critical section
        [pc=3] { run up }   [pc:=1];  //unlock the full/empty semaphore
    }

	relation root
		clock
			execute1 execute2
			block1 block2
			unblock1 unblock2
			//semaphore clocks
			downE upE
			downF upF
			//task clocks
			ready1 ready2
			start1 start2
			stop1 stop2;
		const bufferSize := 1;
	{
		producer:code (
			run: execute1
			unblock: unblock1
			down: downE
			up: upF )

		consumer:code (
			run: execute2
			unblock: unblock2
			down: downF
			up: upE )


		emptySem:mocos.semaphore ( count: bufferSize
			down: downE up: upE
			block: block1 unblock: unblock1 )

		fullSem:mocos.semaphore ( count: 0
			down: downF up: upF
			block: block2 unblock: unblock2 )

		mocos.task (ready: ready1 start: start1 execute: execute1 block: block1 unblock: unblock1 stop: stop1)
		mocos.task (ready: ready2 start: start2 execute: execute2 block: block2 unblock: unblock2 stop: stop2)

		mocos.scheduler2 (isPreemptive: false
			schedule1: ready1 schedule2: ready2
			execute1: start1 execute2: start2
			block1: block1 block2: block2
			stop1: stop1 stop2: stop2)
	}
}